#!/usr/bin/env python

from ansible.module_utils.basic import *


DOCUMENTATION = '''
---
module: router_command
short_description: Executes commands on routers and switches.
description:
  - Executes commands on legacy routers and switches, via
    Telnet or SSH.
author: James Williams (@packetgeeknet)
requirements:
  - paramiko
options:
  connection:
    description:
      - connect to device using netlib (SSH or Telnet) or read offline file
        for testing
    required: false
    default: ssh
    choices: ['ssh', 'telnet', 'offline']
    aliases: []
  command:
    description:
      - Command to execute on router or switch
    required: false
    default: null
    choices: []
    aliases: []
  command_file:
    description:
      - List of commands in a file to execute on a router or switch
    required: false
    choices: []
    aliases: []
  hostname:
    description:
      - Host to log in to
    required: false
    default: {{ inventory_hostname }}
    choices: []
    aliases: []
  username:
    description:
      - Username used to login to a router or switch
    required: false
    default: {{ ansible_ssh_user }}
    choices: []
    aliases: []
  password:
    description:
      - Password used to login to a router or switch
    required: false
    default: {{ ansible_ssh_pass }}
    choices: []
    aliases: []
  enable_password:
    description:
      - Enable password used to enter enable mode
    required: false
    default: null
    choices: []
    aliases: []
'''

EXAMPLES = '''
# show version
- router_command:
    connection=ssh
    command='show version'
    hostname={{ inventory_hostname }}
    username={{ ansible_ssh_user }}
    password={{ ansible_ssh_pass }}
'''


class SSH(object):

    def __init__(self, device_name, username, password, buffer="65535",
                 delay="1", port="22"):
        self.device_name = device_name
        self.username = username
        self.password = password
        self.buffer = buffer
        self.delay = delay
        self.port = int(port)

    def connect(self):
        import paramiko
        import time

        self.pre_conn = paramiko.SSHClient()
        self.pre_conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.pre_conn.connect(self.device_name, username=self.username,
                              password=self.password, allow_agent=False,
                              look_for_keys=False, port=self.port)
        self.client_conn = self.pre_conn.invoke_shell()
        time.sleep(float(self.delay))
        return self.client_conn.recv(self.buffer)

    def close(self):
        return self.pre_conn.close()

    def clear_buffer(self):
        if self.client_conn.recv_ready():
            return self.client_conn.recv(self.buffer)
        else:
            return None

    def set_enable(self, enable_password):
        import re

        if re.search('>$', self.command('\n')):
            enable = self.command('enable')
            if re.search('Password', enable):
                send_pwd = self.command(enable_password)
                return send_pwd
        elif re.search('#$', self.command('\n')):
            return "Action: None. Already in enable mode."
        else:
            return "Error: Unable to determine user privilege status."

    def disable_paging(self, command='term len 0'):
        self.clear_buffer()
        return self.client_conn.sendall(command + "\n")

    def command(self, command):
        import time

        self.client_conn.sendall(command + "\n")
        not_done = True
        output = ""
        self.clear_buffer()
        while not_done:
            time.sleep(float(self.delay))
            if self.client_conn.recv_ready():
                output += self.client_conn.recv(self.buffer)
            else:
                not_done = False
        return output


class Telnet(object):

    def __init__(self, device_name, username, password, delay="2", port="23"):
        self.device_name = device_name
        self.username = username
        self.password = password
        self.delay = float(delay)
        self.port = int(port)

    def connect(self):
        import telnetlib
        import sys

        self.access = telnetlib.Telnet(self.device_name, self.port)
        login_prompt = self.access.read_until("\(Username: \)|\(login: \)",
                                              self.delay)
        if 'login' in login_prompt:
            self.is_nexus = True
            self.access.write(self.username + '\n')
        elif 'Username' in login_prompt:
            self.is_nexus = False
            self.access.write(self.username + '\n')
        password_prompt = self.access.read_until('Password:',
                                                 self.delay)
        self.access.write(self.password + '\n')
        return self.access

    def close(self):
        return self.access.close()

    def set_enable(self, enable_password):
        import re

        if re.search('>$', self.command('\n')):
            self.access.write('enable\n')
            enable = self.access.read_until('Password')
            return self.access.write(enable_password + '\n')
        elif re.search('#$', self.command('\n')):
            return "Action: None. Already in enable mode."
        else:
            return "Error: Unable to determine user privilege status."

    def disable_paging(self, command='term len 0'):
        self.access.write(command + '\n')
        return self.access.read_until("\(#\)|\(>\)", self.delay)

    def command(self, command):
        self.access.write(command + '\n')
        return self.access.read_until("\(#\)|\(>\)", self.delay)


if __name__ == "__main__":
    module = AnsibleModule(
        argument_spec=dict(
            connection=dict(choices=['ssh', 'telnet', 'offline'],
                            default='ssh'),
            command=dict(required=False),
            command_file=dict(required=False),
            hostname=dict(required=False),
            username=dict(required=False, type='str'),
            password=dict(required=False, type='str'),
            enable_password=dict(required=False, type='str'),
        ),
        supports_check_mode=False
    )

    connection = module.params['connection']
    command = module.params['command']
    command_file = module.params['command_file']
    hostname = module.params['hostname']
    username = module.params['username']
    password = module.params['password']
    enable_password = module.params['enable_password']

    if connection == 'ssh':
        device = SSH(device_name=hostname,
                     username=username,
                     password=password,
                     buffer=4096,
                     delay=3)
    elif connection == 'telnet':
        device = Telnet(device_name=hostname,
                        username=username,
                        password=password,
                        delay=2)

    device.connect()

    if enable_password:
        device.set_enable(enable_password)

    device.disable_paging()

    output = []
    if command_file:
        if os.path.isfile(command_file):
            with open(command_file, 'r') as f:
                for cmd in f:
                    cmd = cmd.strip()
                    output.append(device.command(cmd))
        else:
            module.fail_json(msg="Unable to locate{}".format(command_file))
    else:
        output.append(device.command(command))

    results = {}
    results['response'] = output

    module.exit_json(**results)
